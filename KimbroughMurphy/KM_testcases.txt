--------------------------------------------------------------------------------
Test 1: Testing calc_firm_profit.
Testing that profit is 6000.0 when  
firmidx = 1, 
firmqty = 20,
aggqty = 50, and
paramvalues = Dict(
    	T => 6600,
	b => 2,
	numfirms => 2,
	initqs => Dict(2 => 40, 1 => 40),
	A => 400,
	deltas => Dict(2 => 3.0, 1 => 3.0),
	epochlens => Dict(2 => 30, 1 => 30),
	epsilons => Dict(2 => 0.7, 1 => 0.7),
	costs => Dict(2 => 0.0, 1 => 0.0)
)
--------------------------------------------------------------------------------
Test 4: Testing bidquantity.
Testing that bid quantity is 45.840896288379476 when  
currq = 45, 
delta = 4.0. 
Random seed set to 1000 just before calling the function.
--------------------------------------------------------------------------------
Tests 6 - 7: Testing calc_profits
Expected output:
 1 => 9600.0, 2 => 9600.0
Calling calc_profits with 
quantities = Dict(2 => 40, 1 => 40), and 
paramvalues = Dict(
     	T => 6600,
	b => 2,
	numfirms => 2,
	initqs => Dict(2 => 40, 1 => 40),
	A => 400,
	deltas => Dict(2 => 3.0, 1 => 3.0),
	epochlens => Dict(2 => 30, 1 => 30),
	epsilons => Dict(2 => 0.7, 1 => 0.7),
	costs => Dict(2 => 0.0, 1 => 0.0)
)
--------------------------------------------------------------------------------
Test 10: Testing calc_currqchange.
Testing that change in currquantity is 0.5 when  
firmidx = 1, 
firmreturndict = Dict(
	:up => [23.603334566204694, 34.651701419196044, 31.27069683360675, 0.790928339056074, 48.86128300795012, 21.096820215853597, 95.1916339835734, 99.99046588986135, 25.166218303197184, 98.66663668987997], 
	:down => [55.57510873245724, 43.71079746096251, 42.471785049513144, 77.3223048457377, 28.11902322857298, 20.947237319807076, 25.137920979222493]
),
pv = Dict(
    	T => 6600,
	b => 2,
	numfirms => 2,
	initqs => Dict(2 => 40, 1 => 40),
	A => 400,
	deltas => Dict(2 => 3.0, 1 => 3.0),
	epochlens => Dict(2 => 30, 1 => 30),
	epsilons => Dict(2 => 0.9, 1 => 0.5),
	costs => Dict(2 => 0.0, 1 => 0.0)
)

--------------------------------------------------------------------------------
Test 13: Testing calc_currqchange.
Testing that change in currquantity is 0.6 when  
firmidx = 2, 
firmreturndict = Dict(
	:up => [32.43029950291791, 68.85052016067101, 86.97162407893, 24.98321328972841, 34.82407658654518, 6.602576509850033, 31.828621996325325, 38.6709458875224, 0.3996605889154514, 57.944561918710846], 
	:down => [2.535956655709395, 28.373583343973543, 40.22865954750362, 14.79136923237368, 68.04999906060488, 19.223985296945614, 56.45116985159268]
),
pv = Dict(
    	T => 6600,
	b => 2,
	numfirms => 2,
	initqs => Dict(2 => 40, 1 => 40),
	A => 400,
	deltas => Dict(2 => 3.0, 1 => 3.0),
	epochlens => Dict(2 => 30, 1 => 30),
	epsilons => Dict(2 => 0.6, 1 => 0.8),
	costs => Dict(2 => 0.0, 1 => 0.0)
)

--------------------------------------------------------------------------------
Test 14: Testing change_currqtys_reset_returnsdict.
Testing that the :up field of new returnsdict for firm 1 is Any[] when  
t = 11,
currqtys = Dict(2 => 45.0, 1 => 53.0),
returnsdict = Dict{Any, Any}(2 => Dict(:up => [20.947237319807076, 25.137920979222493, 2.037486871266725, 28.77015122756894, 85.9512136087661, 7.695088688120899, 64.03962459899388, 87.35441302706855], :down => [27.85824200287785, 75.13126327861701, 64.4883353942093, 7.782644396003469, 84.81854810000327, 8.56351682044918, 55.32055454580578]), 1 => Dict(:up => [23.603334566204694, 34.651701419196044, 31.27069683360675, 0.790928339056074, 48.86128300795012, 21.096820215853597, 95.1916339835734, 99.99046588986135], :down => [25.166218303197184, 98.66663668987997, 55.57510873245724, 43.71079746096251, 42.471785049513144, 77.3223048457377, 28.11902322857298])),
pv = Dict(
    	T => 6600,
	b => 2,
	numfirms => 2,
	initqs => Dict(2 => 40, 1 => 40),
	A => 400,
	deltas => Dict(2 => 3.0, 1 => 3.0),
	epochlens => Dict(2 => 30, 1 => 10),
	epsilons => Dict(2 => 0.7, 1 => 0.7),
	costs => Dict(2 => 0.0, 1 => 0.0)
)

--------------------------------------------------------------------------------
Test 15: Testing change_currqtys_reset_returnsdict.
Testing that the new current quantity for firm 1 is  
52.3 when  
t = 11,
currqtys = Dict(2 => 45.0, 1 => 53.0),
returnsdict = Dict{Any, Any}(2 => Dict(:up => [20.947237319807076, 25.137920979222493, 2.037486871266725, 28.77015122756894, 85.9512136087661, 7.695088688120899, 64.03962459899388, 87.35441302706855], :down => [27.85824200287785, 75.13126327861701, 64.4883353942093, 7.782644396003469, 84.81854810000327, 8.56351682044918, 55.32055454580578]), 1 => Dict(:up => [23.603334566204694, 34.651701419196044, 31.27069683360675, 0.790928339056074, 48.86128300795012, 21.096820215853597, 95.1916339835734, 99.99046588986135], :down => [25.166218303197184, 98.66663668987997, 55.57510873245724, 43.71079746096251, 42.471785049513144, 77.3223048457377, 28.11902322857298])),
pv = Dict(
    	T => 6600,
	b => 2,
	numfirms => 2,
	initqs => Dict(2 => 40, 1 => 40),
	A => 400,
	deltas => Dict(2 => 3.0, 1 => 3.0),
	epochlens => Dict(2 => 30, 1 => 10),
	epsilons => Dict(2 => 0.7, 1 => 0.7),
	costs => Dict(2 => 0.0, 1 => 0.0)
)

--------------------------------------------------------------------------------
Test 18: Testing run_episode.
Testing that the bidquantity for firm 1 is 53.24898297634038 
when  
t = 11,
currqtys = Dict(2 => 45.0, 1 => 53.0),
returnsdict = Dict{Any, Any}(2 => Dict(:up => [20.947237319807076, 25.137920979222493, 2.037486871266725, 28.77015122756894, 85.9512136087661, 7.695088688120899, 64.03962459899388, 87.35441302706855, 9469.148902643657, 9469.148902643657], :down => [27.85824200287785, 75.13126327861701, 64.4883353942093, 7.782644396003469, 84.81854810000327, 8.56351682044918, 55.32055454580578]), 1 => Dict(:up => [23.603334566204694, 34.651701419196044, 31.27069683360675, 0.790928339056074, 48.86128300795012, 21.096820215853597, 95.1916339835734, 99.99046588986135], :down => [25.166218303197184, 98.66663668987997, 55.57510873245724, 43.71079746096251, 42.471785049513144, 77.3223048457377, 28.11902322857298])),
pv = Dict(
    	T => 6600,
	b => 2,
	numfirms => 2,
	initqs => Dict(2 => 40, 1 => 40),
	A => 400,
	deltas => Dict(2 => 3.0, 1 => 3.0),
	epochlens => Dict(2 => 30, 1 => 10),
	epsilons => Dict(2 => 0.7, 1 => 0.7),
	costs => Dict(2 => 0.0, 1 => 0.0)
)
and random seed is set to 50 just before calling this function.

--------------------------------------------------------------------------------
Test 20: Testing simulate_mkt.
Testing that the simulate_mkt function produces the correct quantities 
for firm 1. Too many to list here. But the first 5 are:
Any[39.07910208515176, 37.04745570034336, 38.26580921295122, 42.99942795339168, 42.9199982013928] 
when
pv = Dict(
    	T => 2000,
	b => 2,
	numfirms => 2,
	initqs => Dict(2 => 40, 1 => 40),
	A => 400,
	deltas => Dict(2 => 3.0, 1 => 3.0),
	epochlens => Dict(2 => 30, 1 => 30),
	epsilons => Dict(2 => 0.7, 1 => 0.7),
	costs => Dict(2 => 0.0, 1 => 0.0)
)
and random seed is set to 1 just before calling this function.

--------------------------------------------------------------------------------
Test 21: Testing simulate_mkt.
Testing that the simulate_mkt function produces the correct quantities 
for firm 2. Too many to list here. But the first 5 are:
Any[38.416200073972284, 38.8762418100164, 39.93167698047701, 42.7114980390144, 38.50997309819183] 
when
pv = Dict(
    	T => 2000,
	b => 2,
	numfirms => 2,
	initqs => Dict(2 => 40, 1 => 40),
	A => 400,
	deltas => Dict(2 => 3.0, 1 => 3.0),
	epochlens => Dict(2 => 30, 1 => 30),
	epsilons => Dict(2 => 0.7, 1 => 0.7),
	costs => Dict(2 => 0.0, 1 => 0.0)
)
and random seed is set to 1 just before calling this function.


--------------------------------------------------------------------------------
Tests 24 - 26: Testing calc_avg_and_aggavg_qty
Expected output:
 q1 => 63.83257271299441, q2 => 66.72870122347486, aggQ => 130.56127393646926
Calling calc_avg_and_aggavg_qty with quantities 
from simulate_mkt function with random seed set to 10 just 
before calling simulate_mkt function. Too many quantities to list.
obs_to_use = 500
paramvalues = Dict(
     	T => 2000,
	b => 2,
	numfirms => 2,
	initqs => Dict(2 => 40, 1 => 40),
	A => 400,
	deltas => Dict(2 => 3.0, 1 => 3.0),
	epochlens => Dict(2 => 30, 1 => 30),
	epsilons => Dict(2 => 0.7, 1 => 0.7),
	costs => Dict(2 => 0.0, 1 => 0.0)
)
24: Testing that q1 has value 63.83257271299441...
25: Testing that q2 has value 66.72870122347486...
26: Testing that aggQ has value 130.56127393646926...
------------------------------------------------------------
